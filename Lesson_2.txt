//import java.util.Arrays;
//
//public class home_work_for_lesson_2<sout> {
//    public static void main(String[] args) {
////         1. Задать целочисленный массив, состоящий из элементов 0 и 1.
////         Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ].
////         С помощью цикла и условия заменить 0 на 1, 1 на 0;
//
////        int[] arr = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0};
////        for (int i = 0; i < arr.length; i++) {
////            arr[i] = 1 - arr[i];
////        }
////
//
////        2. Задать пустой целочисленный массив размером 8.
//// С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21;
////        int[] arr = new int[8];
////        for (int i = 0; i <= 7; i++) {
////            arr[i] = i * 3;
////        }
////        System.out.println(Arrays.toString(arr));
//
////    3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ]
//// пройти по нему циклом, и числа меньшие 6 умножить на 2;
////
////        int[] arr = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
////        for (int i = 0; i < arr.length; i++) {
////            if(arr[i] < 6){
////                arr[i] *= 3;
////            }
////        }
////        System.out.println(Arrays.toString(arr));
//
////        4. Создать квадратный двумерный целочисленный массив
////        (количество строк и столбцов одинаковое), и с помощью цикла(-ов)
////        заполнить его диагональные элементы единицами;
////        final int n = 7;
////        int[][] arr = new int[n][n];
////            for (int i = 0; i < n; i++) {
////            arr[i][i] = 1;
////            arr[i][n - 1 - i] = 1;
////        }
////        System.out.println(Arrays.toString(arr));
////
////        5. ** Задать одномерный массив и найти в нем минимальный и
//////        максимальный элементы (без помощи интернета);
////
////        final int n = 15;
////        int[] arr = new int[n];
////        for (int i = 0; i < arr.length; i++) {
////            arr[i] = (int) (Math.random() * 200);
////        }
////        printArr(arr);
////        int imax, imin;
////        imax = 0;
////        imin = 0;
////        for (int i = 0; i < arr.length; i++) {
////            if (arr[i] > arr[imax]) {
////                imax = i;
////            }
////            if (arr[i] < arr[imin]) {
////                imin = i;
////            }
////        }
////        System.out.printf("imax = %d , max = %d, imin - %d, min - %d",
////                imax, arr[imax], imin, arr[imin]);
////
////
////    }
//// 6. ** Написать метод, в который передается не пустой одномерный целочисленный массив,
//// метод должен вернуть true, если в массиве есть место,
//// в котором сумма левой и правой части массива равны.
//// Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true,
//// checkBalance([1, 1, 1, || 2, 1]) → true, граница показана символами ||,
//// эти символы в массив не входят.
////
////        int[] arr = {2, 2, 2, 1, 2, 2, 12, 1};
////        System.out.println(isBallance(arr));
////
////    }
////    public static boolean isBallance (int[] massiv) {
////        int sum = 0;
////        int sumLeft = 0;
////        for (int i = 0; i < massiv.length; i++) {
////            sum += massiv[i];
////        }
////        if(sum %2 != 0) {
////            return false;
////        }
////
////        for (int i = 0; (sumLeft < sum / 2) && (i < massiv.length); i++) {
////            sumLeft += massiv[i];
////        }
////        return sumLeft == sum / 2;
////    }
////
////
////        public static void printArr (int[] massiv) {
////        for (int i = 0; i < massiv.length; i++) {
////            System.out.print(massiv[i] + " ");
////        }
////        System.out.println();
//
////        7. **** Написать метод, которому на вход подается одномерный
//// массив и число n (может быть положительным, или отрицательным),
//// при этом метод должен сместить все элементымассива на n позиций.
//// Для усложнения задачи нельзя пользоваться вспомогательными массивами.
//
//        int[] arr = {55, 9, 1, 77, 6, 2, 10, 1};
//        int n = 9;
//        printArr(arr);
//        for (int i = 0; i < n; i++) {
//            moveArr(arr);
//        }
//        printArr(arr);
//    }
//
//    public static void moveArr(int[] massiv) {
//        int last = massiv[massiv.length - 1];
//        for (int i = massiv.length - 1; i > 0; i--) {
//            massiv[i] = massiv[i - 1];
//        }
//        massiv[0] = last;
//
//    }
//
//    public static void printArr(int[] massiv) {
//        for (int i = 0; i < massiv.length; i++) {
//            System.out.print(massiv[i] + " ");
//        }
//        System.out.println();
//
//    }
//}
